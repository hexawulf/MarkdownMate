🛠️ MarkdownMate: Production-Ready Collaborative Markdown Editor
Create a fully featured, real-time collaborative markdown editor using React, TypeScript, Firebase, and Express. Develop on Replit. Deploy on Ubuntu Linux Raspberry Pi 5.

🎯 Project Goals
Build MarkdownMate, a real-time, collaborative markdown editor inspired by Notion, Obsidian, and GitBook. This is the fourth flagship app in the piapps.dev portfolio alongside:

CodePatchWork (codepatchwork.com)

Reading Habit Tracker (mybooks.piapps.dev)

TableTamer (piapps.dev)

The app must be:

💻 Production-ready and portable to Raspberry Pi 5

📄 Feature-rich for markdown power users

🧠 A showcase of React, TypeScript, Firebase, and modern state management

🛡️ Secure, with Firebase Auth and environment variable isolation

📦 Container-friendly, with optional Docker deployment

🧪 Testable and maintainable, suitable for open source hosting

👤 Target Users
Developers: Documentation, READMEs, code blocks

Writers/Students: Collaborative content, research, math writing

Teams: Notes, documentation, knowledge bases

🌐 Tech Stack
Frontend (Vite + React + TypeScript)
React 18 with TypeScript via Vite for fast, modern builds

TailwindCSS + shadcn/ui for elegant, utility-based styling

@monaco-editor/react: VSCode-like collaborative editing

Remark/Rehype + KaTeX + Mermaid + Prism.js for advanced markdown rendering

Backend (Express + Node.js + dotenv)
Express.js server (Node 20+)

Serves the frontend build statically

Uses CORS, Helmet, and dotenv for environment management

Real-Time Engine (Firebase)
Authentication: Google, GitHub, email

Firestore: Real-time syncing, document updates, presence tracking

Admin SDK: Secure backend access for user and document control

State & Utility
Zustand for global state management

React Query or SWR for data synchronization

lucide-react, date-fns, nanoid for icons, time, and ID utilities

🧱 Folder Structure
bash
Copy
Edit
markdownmate/
├── client/                 # Vite + React frontend
│   ├── src/
│   │   ├── components/     # Editor, UI, Documents, Auth
│   │   ├── hooks/          # Custom hooks
│   │   ├── stores/         # Zustand global state
│   │   └── types/          # Shared TS types
│   ├── public/
│   └── .env.example        # Frontend Firebase env vars
├── server/                 # Express backend
│   ├── src/
│   │   ├── routes/         # API routes (e.g., export)
│   │   ├── middleware/     # CORS, auth, etc.
│   │   └── index.ts        # Entry point
│   └── .env.example        # Backend Firebase Admin SDK env vars
├── shared/                 # Shared TS types (optional)
├── README.md
├── package.json            # Root scripts
└── .env                    # Deployment values (ignored by Git)
✅ Core Features (MVP Scope)
✅ Real-time collaborative editor (Monaco)

✅ GitHub-Flavored Markdown with math, diagrams, and code blocks

✅ CRUD document management, tags/folders

✅ Firebase Auth (Google, GitHub, email)

✅ User presence and cursor tracking

✅ Auto-save every 2 seconds

✅ Export (Markdown, PDF, HTML)

✅ Search, filter, and versioning

✅ Responsive dark/light UI

🔐 Environment Configuration (Split by Role)
server/.env.example
env
Copy
Edit
# Firebase Admin SDK
FIREBASE_PROJECT_ID=
FIREBASE_CLIENT_EMAIL=
FIREBASE_PRIVATE_KEY_ID=
FIREBASE_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n"
FIREBASE_CLIENT_ID=
FIREBASE_TYPE=service_account
FIREBASE_AUTH_URI=https://accounts.google.com/o/oauth2/auth
FIREBASE_TOKEN_URI=https://oauth2.googleapis.com/token
FIREBASE_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
FIREBASE_CLIENT_X509_CERT_URL=

PORT=3000
NODE_ENV=development
client/.env.example
env
Copy
Edit
# Firebase Web Client SDK
REACT_APP_FIREBASE_API_KEY=
REACT_APP_FIREBASE_AUTH_DOMAIN=
REACT_APP_FIREBASE_PROJECT_ID=
REACT_APP_FIREBASE_STORAGE_BUCKET=
REACT_APP_FIREBASE_MESSAGING_SENDER_ID=
REACT_APP_FIREBASE_APP_ID=
📦 Dependencies
client/package.json
json
Copy
Edit
"dependencies": {
  "react": "^18.2.0",
  "typescript": "^5.0.0",
  "vite": "^4.4.0",
  "tailwindcss": "^3.3.0",
  "@monaco-editor/react": "^4.6.0",
  "zustand": "^4.4.0",
  "firebase": "^10.7.0",
  "@radix-ui/react-*": "latest",
  "remark": "^15.0.0",
  "remark-gfm": "^4.0.0",
  "remark-math": "^6.0.0",
  "rehype-katex": "^7.0.0",
  "prismjs": "^1.29.0",
  "mermaid": "^10.6.0",
  "lucide-react": "^0.298.0",
  "date-fns": "^2.30.0",
  "nanoid": "^5.0.0"
}
server/package.json
json
Copy
Edit
"dependencies": {
  "express": "^4.18.0",
  "cors": "^2.8.5",
  "helmet": "^7.1.0",
  "dotenv": "^16.3.1",
  "firebase-admin": "^11.10.1"
}
🔧 Scripts
package.json (root-level)
json
Copy
Edit
"scripts": {
  "dev": "concurrently \"npm run dev:client\" \"npm run dev:server\"",
  "dev:client": "cd client && vite --host 0.0.0.0 --port 5173",
  "dev:server": "cd server && nodemon src/index.ts",
  "build": "cd client && npm run build",
  "start": "npm run build && node server/dist/index.js"
}
🧪 Development on Replit
Create a new Replit Node.js project

Paste this full structure and install dependencies

Create .env files in both client/ and server/ folders

Run:

bash
Copy
Edit
npm run dev
🚀 Deployment on Raspberry Pi 5 (Ubuntu)
bash
Copy
Edit
# Build frontend
npm run build

# Start backend (serves client + API)
npm run start
For production:

Use NGINX reverse proxy (e.g. markdownmate.piapps.dev)

Optionally use Docker with ARM64 Node base image

✅ Summary
MarkdownMate is a powerful, portable markdown editor

Developed in Replit, deployable on Ubuntu Raspberry Pi 5

Uses two .env files for secure Firebase config split

Showcases modern React, TypeScript, Firebase, and editor tech

Fully modular, reusable, and scalable for future features